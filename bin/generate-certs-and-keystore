#!/usr/bin/env bash
project_home="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

if [ $# -eq 0 ]; then
  echo "Missing flow collector hostname or IP address"
  echo ""
  echo "usage: generate-certs-and-keystore flow-collector-ip-or-hostname"
  exit 1
fi

if [[ $1 = *":"* ]]; then
  flow_collector_host=[$1]
else
  flow_collector_host=$1
fi

flow_collector_certificate_alias=${flow_collector_host}

data_exporter_certificate_authority_name=data-exporter-certificate-authority
data_exporter_certificate_authority_password=${data_exporter_certificate_authority_name}

data_exporter_name=data-exporter
data_exporter_password=${data_exporter_name}

data_exporter_truststore_name=data-exporter-truststore
data_exporter_truststore_password=${data_exporter_truststore_name}


set -e

rm -rf ${project_home}/certs
mkdir -p ${project_home}/certs
cd ${project_home}/certs

set -v

# The Certificate Authority private key
openssl genrsa \
    -passout pass:${data_exporter_certificate_authority_password} \
    -out ${data_exporter_certificate_authority_name}.key \
    8192

# The Certificate Authority X509 Certificate
openssl req \
    -new \
    -x509 \
    -days 365 \
    -key ${data_exporter_certificate_authority_name}.key \
    -passin pass:${data_exporter_certificate_authority_password} \
    -subj "/C=US/ST=California/L=San Jose/O=Cisco/OU=DevNet/CN=cisco.com" \
    -out ${data_exporter_certificate_authority_name}.crt

# The Data Exporter private key
openssl genrsa \
    -passout pass:${data_exporter_password} \
    -out ${data_exporter_name}.key \
    8192

# The Data Exporter Certificate Signing Request
openssl req \
    -new \
    -key ${data_exporter_name}.key \
    -passin pass:${data_exporter_password} \
    -subj "/C=US/ST=Georgia/L=Atlanta/O=Cisco/OU=Stealthwatch/CN=lancope.com" \
    -out ${data_exporter_name}.csr

# The Data Exporter Certificate signed by the Certificate Authority
openssl x509 \
    -req \
    -days 365 \
    -in ${data_exporter_name}.csr \
    -CA ${data_exporter_certificate_authority_name}.crt \
    -CAkey ${data_exporter_certificate_authority_name}.key \
    -set_serial 01 \
    -passin pass:${data_exporter_certificate_authority_password} \
    -out ${data_exporter_name}.crt

# The Data Exporter client certs
openssl pkcs12 \
    -export \
    -clcerts \
    -in ${data_exporter_name}.crt \
    -passin pass:${data_exporter_password} \
    -inkey ${data_exporter_name}.key \
    -passout pass:${data_exporter_password} \
    -out ${data_exporter_name}.pkcs12

# Retrieve the Flow Collector's certificate.
openssl s_client -showcerts -connect ${flow_collector_host}:443 </dev/null 2>/dev/null | \
    sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | \
    tee ${flow_collector_certificate_alias}.crt

# Trust store with the Flow Collector's certificate.
keytool \
    -import \
    -alias ${flow_collector_certificate_alias} \
    -file ${flow_collector_certificate_alias}.crt \
    -storepass ${data_exporter_truststore_password} \
    -keystore ${data_exporter_truststore_name}.pkcs12 \
    -storetype pkcs12

